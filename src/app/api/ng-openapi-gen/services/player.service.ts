/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { create } from '../fn/player/create';
import { Create$Params } from '../fn/player/create';
import { findOne } from '../fn/player/find-one';
import { FindOne$Params } from '../fn/player/find-one';
import { foobar } from '../fn/player/foobar';
import { Foobar$Params } from '../fn/player/foobar';
import { getAllActive } from '../fn/player/get-all-active';
import { GetAllActive$Params } from '../fn/player/get-all-active';
import { PlayerDto } from '../models/player-dto';
import { remove } from '../fn/player/remove';
import { Remove$Params } from '../fn/player/remove';
import { update } from '../fn/player/update';
import { Update$Params } from '../fn/player/update';

@Injectable({ providedIn: 'root' })
export class PlayerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `foobar()` */
  static readonly FoobarPath = '/player';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `foobar()` instead.
   *
   * This method doesn't expect any request body.
   */
  foobar$Response(params?: Foobar$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PlayerDto>>> {
    return foobar(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `foobar$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  foobar(params?: Foobar$Params, context?: HttpContext): Observable<Array<PlayerDto>> {
    return this.foobar$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PlayerDto>>): Array<PlayerDto> => r.body)
    );
  }

  /** Path part for operation `create()` */
  static readonly CreatePath = '/player';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create$Response(params: Create$Params, context?: HttpContext): Observable<StrictHttpResponse<PlayerDto>> {
    return create(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create(params: Create$Params, context?: HttpContext): Observable<PlayerDto> {
    return this.create$Response(params, context).pipe(
      map((r: StrictHttpResponse<PlayerDto>): PlayerDto => r.body)
    );
  }

  /** Path part for operation `findOne()` */
  static readonly FindOnePath = '/player/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  findOne$Response(params: FindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<PlayerDto>> {
    return findOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findOne(params: FindOne$Params, context?: HttpContext): Observable<PlayerDto> {
    return this.findOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<PlayerDto>): PlayerDto => r.body)
    );
  }

  /** Path part for operation `remove()` */
  static readonly RemovePath = '/player/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `remove()` instead.
   *
   * This method doesn't expect any request body.
   */
  remove$Response(params: Remove$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return remove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `remove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  remove(params: Remove$Params, context?: HttpContext): Observable<string> {
    return this.remove$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `update()` */
  static readonly UpdatePath = '/player/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update$Response(params: Update$Params, context?: HttpContext): Observable<StrictHttpResponse<PlayerDto>> {
    return update(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update(params: Update$Params, context?: HttpContext): Observable<PlayerDto> {
    return this.update$Response(params, context).pipe(
      map((r: StrictHttpResponse<PlayerDto>): PlayerDto => r.body)
    );
  }

  /** Path part for operation `getAllActive()` */
  static readonly GetAllActivePath = '/player/active';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllActive()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllActive$Response(params?: GetAllActive$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PlayerDto>>> {
    return getAllActive(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllActive$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllActive(params?: GetAllActive$Params, context?: HttpContext): Observable<Array<PlayerDto>> {
    return this.getAllActive$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PlayerDto>>): Array<PlayerDto> => r.body)
    );
  }

}
