/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { create_3 } from '../fn/event/create-3';
import { Create_3$Params } from '../fn/event/create-3';
import { CreateEventResponse } from '../models/create-event-response';
import { EventDto } from '../models/event-dto';
import { findAll_3 } from '../fn/event/find-all-3';
import { FindAll_3$Params } from '../fn/event/find-all-3';
import { findOne_3 } from '../fn/event/find-one-3';
import { FindOne_3$Params } from '../fn/event/find-one-3';
import { remove_3 } from '../fn/event/remove-3';
import { Remove_3$Params } from '../fn/event/remove-3';
import { update_3 } from '../fn/event/update-3';
import { Update_3$Params } from '../fn/event/update-3';

@Injectable({ providedIn: 'root' })
export class EventService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAll_3()` */
  static readonly FindAll_3Path = '/event';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAll_3()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll_3$Response(params?: FindAll_3$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<EventDto>>> {
    return findAll_3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAll_3$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll_3(params?: FindAll_3$Params, context?: HttpContext): Observable<Array<EventDto>> {
    return this.findAll_3$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<EventDto>>): Array<EventDto> => r.body)
    );
  }

  /** Path part for operation `create_3()` */
  static readonly Create_3Path = '/event';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create_3()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create_3$Response(params: Create_3$Params, context?: HttpContext): Observable<StrictHttpResponse<CreateEventResponse>> {
    return create_3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create_3$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create_3(params: Create_3$Params, context?: HttpContext): Observable<CreateEventResponse> {
    return this.create_3$Response(params, context).pipe(
      map((r: StrictHttpResponse<CreateEventResponse>): CreateEventResponse => r.body)
    );
  }

  /** Path part for operation `findOne_3()` */
  static readonly FindOne_3Path = '/event/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findOne_3()` instead.
   *
   * This method doesn't expect any request body.
   */
  findOne_3$Response(params: FindOne_3$Params, context?: HttpContext): Observable<StrictHttpResponse<EventDto>> {
    return findOne_3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findOne_3$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findOne_3(params: FindOne_3$Params, context?: HttpContext): Observable<EventDto> {
    return this.findOne_3$Response(params, context).pipe(
      map((r: StrictHttpResponse<EventDto>): EventDto => r.body)
    );
  }

  /** Path part for operation `remove_3()` */
  static readonly Remove_3Path = '/event/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `remove_3()` instead.
   *
   * This method doesn't expect any request body.
   */
  remove_3$Response(params: Remove_3$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return remove_3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `remove_3$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  remove_3(params: Remove_3$Params, context?: HttpContext): Observable<string> {
    return this.remove_3$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `update_3()` */
  static readonly Update_3Path = '/event/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update_3()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update_3$Response(params: Update_3$Params, context?: HttpContext): Observable<StrictHttpResponse<EventDto>> {
    return update_3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update_3$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update_3(params: Update_3$Params, context?: HttpContext): Observable<EventDto> {
    return this.update_3$Response(params, context).pipe(
      map((r: StrictHttpResponse<EventDto>): EventDto => r.body)
    );
  }

}
