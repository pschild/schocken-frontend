/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addFinalist } from '../fn/operations/add-finalist';
import { AddFinalist$Params } from '../fn/operations/add-finalist';
import { create_1 } from '../fn/operations/create-1';
import { Create_1$Params } from '../fn/operations/create-1';
import { create_3 } from '../fn/operations/create-3';
import { Create_3$Params } from '../fn/operations/create-3';
import { create_4 } from '../fn/operations/create-4';
import { Create_4$Params } from '../fn/operations/create-4';
import { findAll } from '../fn/operations/find-all';
import { findAll_2 } from '../fn/operations/find-all-2';
import { FindAll_2$Params } from '../fn/operations/find-all-2';
import { findAll_3 } from '../fn/operations/find-all-3';
import { FindAll_3$Params } from '../fn/operations/find-all-3';
import { FindAll$Params } from '../fn/operations/find-all';
import { findOne_1 } from '../fn/operations/find-one-1';
import { FindOne_1$Params } from '../fn/operations/find-one-1';
import { findOne_3 } from '../fn/operations/find-one-3';
import { FindOne_3$Params } from '../fn/operations/find-one-3';
import { findOne_4 } from '../fn/operations/find-one-4';
import { FindOne_4$Params } from '../fn/operations/find-one-4';
import { getDetails } from '../fn/operations/get-details';
import { GetDetails$Params } from '../fn/operations/get-details';
import { getOverview_1 } from '../fn/operations/get-overview-1';
import { GetOverview_1$Params } from '../fn/operations/get-overview-1';
import { remove_1 } from '../fn/operations/remove-1';
import { Remove_1$Params } from '../fn/operations/remove-1';
import { remove_3 } from '../fn/operations/remove-3';
import { Remove_3$Params } from '../fn/operations/remove-3';
import { remove_4 } from '../fn/operations/remove-4';
import { Remove_4$Params } from '../fn/operations/remove-4';
import { removeFinalist } from '../fn/operations/remove-finalist';
import { RemoveFinalist$Params } from '../fn/operations/remove-finalist';
import { update_1 } from '../fn/operations/update-1';
import { Update_1$Params } from '../fn/operations/update-1';
import { update_3 } from '../fn/operations/update-3';
import { Update_3$Params } from '../fn/operations/update-3';
import { update_4 } from '../fn/operations/update-4';
import { Update_4$Params } from '../fn/operations/update-4';
import { updateAttendees } from '../fn/operations/update-attendees';
import { UpdateAttendees$Params } from '../fn/operations/update-attendees';

@Injectable({ providedIn: 'root' })
export class ApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAll()` */
  static readonly FindAllPath = '/round';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll$Response(params?: FindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return findAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll(params?: FindAll$Params, context?: HttpContext): Observable<void> {
    return this.findAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `create_1()` */
  static readonly Create_1Path = '/round';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create_1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create_1$Response(params: Create_1$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return create_1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create_1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create_1(params: Create_1$Params, context?: HttpContext): Observable<void> {
    return this.create_1$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `findOne_1()` */
  static readonly FindOne_1Path = '/round/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findOne_1()` instead.
   *
   * This method doesn't expect any request body.
   */
  findOne_1$Response(params: FindOne_1$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return findOne_1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findOne_1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findOne_1(params: FindOne_1$Params, context?: HttpContext): Observable<void> {
    return this.findOne_1$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `remove_1()` */
  static readonly Remove_1Path = '/round/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `remove_1()` instead.
   *
   * This method doesn't expect any request body.
   */
  remove_1$Response(params: Remove_1$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return remove_1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `remove_1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  remove_1(params: Remove_1$Params, context?: HttpContext): Observable<void> {
    return this.remove_1$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `update_1()` */
  static readonly Update_1Path = '/round/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update_1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update_1$Response(params: Update_1$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return update_1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update_1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update_1(params: Update_1$Params, context?: HttpContext): Observable<void> {
    return this.update_1$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getDetails()` */
  static readonly GetDetailsPath = '/round/{id}/details';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDetails()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDetails$Response(params: GetDetails$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return getDetails(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDetails$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDetails(params: GetDetails$Params, context?: HttpContext): Observable<void> {
    return this.getDetails$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `updateAttendees()` */
  static readonly UpdateAttendeesPath = '/round/{id}/attendees';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateAttendees()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAttendees$Response(params: UpdateAttendees$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateAttendees(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateAttendees$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAttendees(params: UpdateAttendees$Params, context?: HttpContext): Observable<void> {
    return this.updateAttendees$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `removeFinalist()` */
  static readonly RemoveFinalistPath = '/round/{roundId}/finalists/{playerId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeFinalist()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeFinalist$Response(params: RemoveFinalist$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return removeFinalist(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeFinalist$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeFinalist(params: RemoveFinalist$Params, context?: HttpContext): Observable<void> {
    return this.removeFinalist$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `addFinalist()` */
  static readonly AddFinalistPath = '/round/{roundId}/finalists/{playerId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addFinalist()` instead.
   *
   * This method doesn't expect any request body.
   */
  addFinalist$Response(params: AddFinalist$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return addFinalist(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addFinalist$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  addFinalist(params: AddFinalist$Params, context?: HttpContext): Observable<void> {
    return this.addFinalist$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `findAll_2()` */
  static readonly FindAll_2Path = '/event';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAll_2()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll_2$Response(params?: FindAll_2$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return findAll_2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAll_2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll_2(params?: FindAll_2$Params, context?: HttpContext): Observable<void> {
    return this.findAll_2$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `create_3()` */
  static readonly Create_3Path = '/event';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create_3()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create_3$Response(params: Create_3$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return create_3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create_3$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create_3(params: Create_3$Params, context?: HttpContext): Observable<void> {
    return this.create_3$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `findOne_3()` */
  static readonly FindOne_3Path = '/event/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findOne_3()` instead.
   *
   * This method doesn't expect any request body.
   */
  findOne_3$Response(params: FindOne_3$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return findOne_3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findOne_3$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findOne_3(params: FindOne_3$Params, context?: HttpContext): Observable<void> {
    return this.findOne_3$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `remove_3()` */
  static readonly Remove_3Path = '/event/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `remove_3()` instead.
   *
   * This method doesn't expect any request body.
   */
  remove_3$Response(params: Remove_3$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return remove_3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `remove_3$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  remove_3(params: Remove_3$Params, context?: HttpContext): Observable<void> {
    return this.remove_3$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `update_3()` */
  static readonly Update_3Path = '/event/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update_3()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update_3$Response(params: Update_3$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return update_3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update_3$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update_3(params: Update_3$Params, context?: HttpContext): Observable<void> {
    return this.update_3$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `findAll_3()` */
  static readonly FindAll_3Path = '/event-type';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAll_3()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll_3$Response(params?: FindAll_3$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return findAll_3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAll_3$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll_3(params?: FindAll_3$Params, context?: HttpContext): Observable<void> {
    return this.findAll_3$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `create_4()` */
  static readonly Create_4Path = '/event-type';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create_4()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create_4$Response(params: Create_4$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return create_4(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create_4$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create_4(params: Create_4$Params, context?: HttpContext): Observable<void> {
    return this.create_4$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `findOne_4()` */
  static readonly FindOne_4Path = '/event-type/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findOne_4()` instead.
   *
   * This method doesn't expect any request body.
   */
  findOne_4$Response(params: FindOne_4$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return findOne_4(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findOne_4$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findOne_4(params: FindOne_4$Params, context?: HttpContext): Observable<void> {
    return this.findOne_4$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `remove_4()` */
  static readonly Remove_4Path = '/event-type/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `remove_4()` instead.
   *
   * This method doesn't expect any request body.
   */
  remove_4$Response(params: Remove_4$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return remove_4(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `remove_4$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  remove_4(params: Remove_4$Params, context?: HttpContext): Observable<void> {
    return this.remove_4$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `update_4()` */
  static readonly Update_4Path = '/event-type/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update_4()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update_4$Response(params: Update_4$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return update_4(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update_4$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update_4(params: Update_4$Params, context?: HttpContext): Observable<void> {
    return this.update_4$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getOverview_1()` */
  static readonly GetOverview_1Path = '/event-type-overview';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOverview_1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOverview_1$Response(params: GetOverview_1$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return getOverview_1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOverview_1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOverview_1(params: GetOverview_1$Params, context?: HttpContext): Observable<void> {
    return this.getOverview_1$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
