/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { create_4 } from '../fn/event-type/create-4';
import { Create_4$Params } from '../fn/event-type/create-4';
import { EventTypeDto } from '../models/event-type-dto';
import { findAll_4 } from '../fn/event-type/find-all-4';
import { FindAll_4$Params } from '../fn/event-type/find-all-4';
import { findOne_4 } from '../fn/event-type/find-one-4';
import { FindOne_4$Params } from '../fn/event-type/find-one-4';
import { remove_4 } from '../fn/event-type/remove-4';
import { Remove_4$Params } from '../fn/event-type/remove-4';
import { update_4 } from '../fn/event-type/update-4';
import { Update_4$Params } from '../fn/event-type/update-4';

@Injectable({ providedIn: 'root' })
export class EventTypeService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAll_4()` */
  static readonly FindAll_4Path = '/event-type';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAll_4()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll_4$Response(params?: FindAll_4$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<EventTypeDto>>> {
    return findAll_4(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAll_4$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll_4(params?: FindAll_4$Params, context?: HttpContext): Observable<Array<EventTypeDto>> {
    return this.findAll_4$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<EventTypeDto>>): Array<EventTypeDto> => r.body)
    );
  }

  /** Path part for operation `create_4()` */
  static readonly Create_4Path = '/event-type';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create_4()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create_4$Response(params: Create_4$Params, context?: HttpContext): Observable<StrictHttpResponse<EventTypeDto>> {
    return create_4(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create_4$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create_4(params: Create_4$Params, context?: HttpContext): Observable<EventTypeDto> {
    return this.create_4$Response(params, context).pipe(
      map((r: StrictHttpResponse<EventTypeDto>): EventTypeDto => r.body)
    );
  }

  /** Path part for operation `findOne_4()` */
  static readonly FindOne_4Path = '/event-type/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findOne_4()` instead.
   *
   * This method doesn't expect any request body.
   */
  findOne_4$Response(params: FindOne_4$Params, context?: HttpContext): Observable<StrictHttpResponse<EventTypeDto>> {
    return findOne_4(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findOne_4$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findOne_4(params: FindOne_4$Params, context?: HttpContext): Observable<EventTypeDto> {
    return this.findOne_4$Response(params, context).pipe(
      map((r: StrictHttpResponse<EventTypeDto>): EventTypeDto => r.body)
    );
  }

  /** Path part for operation `remove_4()` */
  static readonly Remove_4Path = '/event-type/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `remove_4()` instead.
   *
   * This method doesn't expect any request body.
   */
  remove_4$Response(params: Remove_4$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return remove_4(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `remove_4$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  remove_4(params: Remove_4$Params, context?: HttpContext): Observable<string> {
    return this.remove_4$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `update_4()` */
  static readonly Update_4Path = '/event-type/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update_4()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update_4$Response(params: Update_4$Params, context?: HttpContext): Observable<StrictHttpResponse<EventTypeDto>> {
    return update_4(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update_4$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update_4(params: Update_4$Params, context?: HttpContext): Observable<EventTypeDto> {
    return this.update_4$Response(params, context).pipe(
      map((r: StrictHttpResponse<EventTypeDto>): EventTypeDto => r.body)
    );
  }

}
